package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.commons.util.PageUtils;
import ${mainPath}.commons.util.R;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags = "${comments}api")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @GetMapping("/list")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:list')")
    @ApiOperation(value = "列表")
    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = ${classname}Service.queryPage(params);
        return R.ok().put(page);
    }


    /**
     * 信息
     */
    @GetMapping("/info/{${pk.attrname}}")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:info')")
    @ApiOperation(value = "信息")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        ${className}Entity ${classname} = ${classname}Service.selectById(${pk.attrname});
        return R.ok().put(${classname});
    }

    /**
     * 保存
     */
    @PostMapping("/save")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:save')")
    @ApiOperation(value = "保存")
    public R save(@RequestBody ${className}Entity ${classname}){
        ${classname}Service.insert(${classname});
        return R.ok();
    }

    /**
     * 修改
     */
    @PutMapping("/update")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:update')")
    @ApiOperation(value = "修改")
    public R update(@RequestBody ${className}Entity ${classname}){
        ${classname}Service.updateById(${classname});
        return R.ok();
    }

    /**
     * 删除
     */
    @DeleteMapping("/delete")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:delete')")
    @ApiOperation(value = "删除")
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
        ${classname}Service.deleteBatchIds(Arrays.asList(${pk.attrname}s));
        return R.ok();
    }

}
