package com.mindasoft.cloud.gateway.util;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

/**
 * 密码加密MD5实现类
 * 
 * @author huangmin
 * @Date 2015年12月17日下午2:39:56
 *
 */
public class MD5Utils {
	
	/**
	 * 混淆码。防止破解。
	 */
	private static String defaultSalt;

	/**
	 * Used to build output as Hex
	 */
	private static final char[] DIGITS_LOWER =
			{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};

	/**
	 * Used to build output as Hex
	 */
	private static final char[] DIGITS_UPPER =
			{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
	
	public static void setDefaultSalt(String defaultSalt) {
		MD5Utils.defaultSalt = defaultSalt;
	}

	public static String encode(String rawPass) {
		return encode(rawPass, defaultSalt);
	}

	public static String encode(String rawPass, String salt) {
		String saltedPass = mergeSalt(rawPass, salt, false);
		MessageDigest messageDigest = getMessageDigest();
		byte[] digest;
		try {
			digest = messageDigest.digest(saltedPass.getBytes("UTF-8"));
		} catch (UnsupportedEncodingException e) {
			throw new IllegalStateException("UTF-8 not supported!");
		}
		return new String(encodeHex(digest));
	}

	/**
	 * @param encPass 密文
	 * @param rawPass 原文
	 * @return
	 */
	public static boolean isValid(String encPass, String rawPass) {
		return isValid(encPass, rawPass, defaultSalt);
	}

	public static boolean isValid(String encPass, String rawPass, String salt) {
		if (encPass == null) {
			return false;
		}
		String pass2 = encode(rawPass, salt);
		return encPass.equals(pass2);
	}

	public static boolean isValid(String encPass,TreeMap<String,Object> paramMap, String secret_key){
		StringBuilder rawSignature = new StringBuilder();
		Iterator<Map.Entry<String,Object>> it = paramMap.entrySet().iterator();
		while(it.hasNext()){
			Map.Entry entry = it.next();
			String value = null;
			if(null == entry.getValue()){
				value = "";
			}
			value = entry.getValue().toString();
			rawSignature.append(entry.getKey()).append("=").append(value).append("&");
		}
		rawSignature.append("secret_key=").append(secret_key);
		System.out.println("##sign String:"+rawSignature.toString());
		String encSign = encode(rawSignature.toString().toLowerCase());
		System.out.println("##isValid:encPass="+encPass+";encSign="+encSign);
		return null != encPass&&encPass.equals(encSign);
	}

	protected final static MessageDigest getMessageDigest() {
		String algorithm = "MD5";
		try {
			return MessageDigest.getInstance(algorithm);
		} catch (NoSuchAlgorithmException e) {
			throw new IllegalArgumentException("No such algorithm ["
					+ algorithm + "]");
		}
	}

	/**
	 * Used by subclasses to extract the password and salt from a merged
	 * <code>String</code> created using
	 * {@link #mergeSalt(String,Object,boolean)}.
	 * <p>
	 * The first element in the returned array is the password. The second
	 * element is the salt. The salt array element will always be present, even
	 * if no salt was found in the <code>mergedPasswordSalt</code> argument.
	 * </p>
	 * 
	 * @param salt
	 *            as generated by <code>mergePasswordAndSalt</code>
	 * 
	 * @return an array, in which the first element is the password and the
	 *         second the salt
	 * 
	 * @throws IllegalArgumentException
	 *             if mergedPasswordSalt is null or empty.
	 */
	protected static String mergeSalt(String password, Object salt,
			boolean strict) {
		if (password == null) {
			password = "";
		}
		if (strict && (salt != null)) {
			if ((salt.toString().lastIndexOf("{") != -1)
					|| (salt.toString().lastIndexOf("}") != -1)) {
				throw new IllegalArgumentException(
						"Cannot use { or } in salt.toString()");
			}
		}
		if ((salt == null) || "".equals(salt)) {
			return password;
		} else {
			return password + "{" + salt.toString() + "}";
		}
	}

	/**
	 * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.
	 * The returned array will be double the length of the passed array, as it takes two characters to represent any
	 * given byte.
	 *
	 * @param data
	 *            a byte[] to convert to Hex characters
	 * @return A char[] containing hexadecimal characters
	 */
	public static char[] encodeHex(byte[] data) {
		return encodeHex(data, true);
	}

	/**
	 * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.
	 * The returned array will be double the length of the passed array, as it takes two characters to represent any
	 * given byte.
	 *
	 * @param data
	 *            a byte[] to convert to Hex characters
	 * @param toLowerCase
	 *            {@code true} converts to lowercase, {@code false} to uppercase
	 * @return A char[] containing hexadecimal characters
	 * @since 1.4
	 */
	public static char[] encodeHex(byte[] data, boolean toLowerCase) {
		return encodeHex(data, toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);
	}

	/**
	 * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.
	 * The returned array will be double the length of the passed array, as it takes two characters to represent any
	 * given byte.
	 *
	 * @param data
	 *            a byte[] to convert to Hex characters
	 * @param toDigits
	 *            the output alphabet
	 * @return A char[] containing hexadecimal characters
	 * @since 1.4
	 */
	protected static char[] encodeHex(byte[] data, char[] toDigits) {
		int l = data.length;
		char[] out = new char[l << 1];
		// two characters form the hex value.
		for (int i = 0, j = 0; i < l; i++) {
			out[j++] = toDigits[(0xF0 & data[i]) >>> 4];
			out[j++] = toDigits[0x0F & data[i]];
		}
		return out;
	}

	public static void main(String[] args) {
		System.out.println(MD5Utils.encode("code=061rsHZo14qJkq0YbSXo1cgyZo1rsHZi&state=STATE&secret_key=m20zdyh@065#$mgtv10d"));
//		MD5Utils.setDefaultSalt("1231");
//		System.out.println(MD5Utils.encode("123456"));
	}
}
